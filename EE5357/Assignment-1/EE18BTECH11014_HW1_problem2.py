import numpy as np
import matplotlib.pyplot as plt

# Esimators
def ML_Estimator(Data):
	"""
	Maximum Likelihood Estimator for Multinomial Distribution
	"""
	N = Data.shape[0]
	Symbols, Freqs = np.unique(Data,return_counts = True)
	Phat = np.round(Freqs/N, decimals=6)
	return Symbols, Phat

def Add1_Estimator(Data):
	"""
	Add-1 Estimator for Multinomial Distribution
	"""
	N = Data.shape[0]
	Symbols, Freqs = np.unique(Data,return_counts = True)
	M = Symbols.shape[0]
	Phat = (1 + Freqs)/(N + M)
	return Symbols, Phat
	
	
# Error Measurements	
def MSE(P, Phat):
	return np.sum(np.square(P - Phat))
	
def TV(P, Phat):
	return 0.5 * np.sum(np.abs(P - Phat))


# Entropy
def Entropy(P):
	logP = -1 * np.log2(P)
	return np.sum(np.multiply(P,logP))
	
	
# Data from .txt File
Data = np.array([6,8,6,6,9,5,3,6,0,9,6,9,6,2,6,6,8,6,6,9,2,2,8,6,2,2,1,6,2,9,9,6,6,9,8,9,0,2,2,0,6,6,8,1,8,
6,6,6,6,8,8,8,6,2,4,2,8,6,8,2,6,8,8,2,6,8,6,6,2,2,3,6,1,8,2,9,2,6,4,6,2,6,8,8,6,9,6,2,8,6,6,6,8,9,8,3,6,9,
6,9,2,8,9,6,9,9,6,6,3,8,2,9,9,8,6,2,6,8,8,9,9,8,8,6,8,6,6,8,2,6,6,2,2,6,9,9,9,2,2,6,8,8,8,6,9,6,8,8,6,9,8,
8,8,2,6,6,8,6,8,8,6,0,3,6,6,8,8,6,8,1,8,6,9,6,8,8,9,8,2,6,9,8,1,8,6,9,6,3,6,6,6,4,6,6,8,8,6,8,8,2,6,6,6,6,
2,9,6,2,3,2,2,8,2,2,2,8,2,9,9,9,2,9,9,2,8,2,3,6,8,6,6,6,8,9,6,2,6,2,2,2,9,6,9,6,6,6,6,2,6,9,6,9,2,8,8,9,6,
8,6,6,6,6,9,8,2,7,6,6,9,6,8,9,6,8,2,6,6,8,8,6,6,6,6,9,8,6,8,4,8,6,3,8,3,3,2,9,8,6,9,3,8,8,6,6,2,2,2,8,2,3,
9,1,2,8,8,8,9,8,8,2,8,9,3,6,4,9,1,2,6,6,9,8,6,8,4,6,6,8,2,4,8,6,0,8,8,8,6,6,6,8,3,2,8,8,8,4,6,6,8,9,2,9,6,
6,8,6,6,2,6,8,6,6,2,6,6,2,2,3,6,6,6,3,6,9,8,6,2,6,6,6,2,8,6,8,2,2,8,6,6,8,2,8,8,2,8,8,6,2,6,8,9,8,6,8,1,6,
8,8,8,8,2,8,8,6,8,6,6,3,9,8,8,8,8,2,6,6,9,8,6,8,6,6,9,3,6,9,6,2,8,2,6,8,2,8,6,2,4,9,6,8,9,8,3,2,6,6,6,3,6,
8,6,1,0,8,8,3,9,2,8,8,8,9,2,8,0,8,8,8,9,2,6,2,8,6,9,8,8,8,2,6,8,9,6,6,2,8,8,3,2,9,8,2,8,6,2,6,9,9,2,2,6,6,
6,9,2,2,6,9,6,9,8,2,8,6,0,2,2,2,8,1,3,6,6,6,6,9,6,1,9,9,8,9,6,2,6,6,6,2,2,3,8,8,3,6,6,9,6,9,6,6,6,6,8,3,6,
9,0,9,8,8,9,8,2,6,8,9,6,6,9,2,6,9,8,6,2,2,6,6,8,6,9,6,2,8,0,9,6,0,6,3,9,7,9,9,2,9,6,2,6,8,6,8,9,2,9,9,9,9,
6,9,3,9,1,6,8,3,6,6,8,6,6,6,8,9,8,6,9,0,3,6,6,2,2,2,6,8,8,6,8,2,8,6,8,8,8,6,8,6,6,6,8,9,1,6,9,2,9,9,9,8,6,
8,6,3,9,6,9,6,9,9,6,2,8,7,6,9,9,6,8,8,2,2,8,3,9,1,6,3,9,8,2,2,6,6,6,9,6,3,2,9,6,8,9,6,6,6,6,8,8,8,8,2,3,6,
6,6,9,9,6,6,6,8,6,0,6,6,9,8,8,6,9,4,9,6,6,8,6,2,6,2,2,2,1,6,8,8,8,9,2,9,3,6,6,0,2,9,8,3,3,8,3,0,2,8,2,6,9,
8,2,2,8,6,8,6,8,6,8,6,6,8,6,9,3,6,6,0,6,9,2,8,8,8,8,8,9,2,2,6,0,8,6,2,9,8,8,9,2,6,9,6,6,6,8,9,8,6,3,8,6,9,
6,6,6,2,6,8,6,9,6,2,8,8,8,9,2,6,2,9,6,6,4,8,8,8,8,9,9,6,9,8,9,2,8,6,9,3,6,2,9,9,8,2,2,8,6,3,6,8,8,9,9,8,3,
6,4,9,9,6,6,9,6,8,8,8,9,8,9,2,8,6,8,6,8,6,6,9,2,8,8,2,9,9,8,9,8,9,8,9,8,2,6,3,6,3,8,8,2,2,3,2,2,4,6,9,2,6,
8,6,1,8,9,6,4,6,8,9,8,1,9,3,3,1,8,8,9,2,6,2,6,6,1,6,8,6,6,9,6,8,8,6,7,6,2,6,8,6,6,6,6,9,2,6,9,3,3,0,2,8,2,9])

# True Probabilities from .txt File
P = np.array([0.01843359882677489,0.01624714813956386,0.17066888407911396,0.045450369901289187,0.015367192091604257,
0.004966812154307403,0.3408653590947885,0.0036522190060392173,0.23689585816271586,0.1474525585438028])
P = np.round(P,decimals=6)
P = np.round(P/np.sum(P), decimals=6)
print ("True Probabilities =", P)
print ("Entropy of P =", Entropy(P))
print ("-"*50)
print()
	

# ML Estimation
print ("Maximum Likelihood Estimation:")
Symbols, Phat = ML_Estimator(Data)
print ("Phat =", Phat)
print ("MSE =", MSE(P, Phat))
print ("TV =", TV(P, Phat))
print ("Entropy of Estimate =", Entropy(Phat))
print ("Entropy Comparision =", np.abs(Entropy(Phat) - Entropy(P)))
print ("-"*50)
print()


# Add-1 Estimation
print ("Add-1 Estimation:")
Symbols, Phat = Add1_Estimator(Data)
print ("Phat =", Phat)
print ("MSE =", MSE(P, Phat))
print ("TV =", TV(P, Phat))
print ("Entropy of Estimate =", Entropy(Phat))
print ("Entropy Comparision =", np.abs(Entropy(Phat) - Entropy(P)))
print ("-"*50)
print()
